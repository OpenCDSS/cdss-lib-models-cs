using System;
using System.Collections.Generic;
using System.IO;

// StateMod_DeltaPlot - store the information generated by StateMod DelPlt utility

/* NoticeStart

CDSS Models Java Library
CDSS Models Java Library is a part of Colorado's Decision Support Systems (CDSS)
Copyright (C) 1994-2019 Colorado Department of Natural Resources

CDSS Models Java Library is free software:  you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    CDSS Models Java Library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with CDSS Models Java Library.  If not, see <https://www.gnu.org/licenses/>.

NoticeEnd */

//------------------------------------------------------------------------------
// StateMod_DeltaPlot - Created to store the information 
//		generated by StateMod DelPlt utility.  Contains function
//		to convert information from DelPlt format to ArcView format
//		file.
//------------------------------------------------------------------------------
// Copyright:	See the COPYRIGHT file.
//------------------------------------------------------------------------------
// History:
// 
// 30 Nov 1998	Catherine E.		Created initial version of class.
//		Nutting-Lane, RTi	
// 21 Dec 1998	CEN, RTi		Added throws IOException to read/write
//					routines.
// 12 May 1999	CEN, RTi		Change following on SMWriteArcViewFile:
//					* remove comments at top of output file
//					* add double quotes to station
//					  identifier
//					* remove comma at end of each line
// 17 Feb 2001	Steven A. Malers, RTi	Code review.  Clean up javadoc.  Handle
//					nulls.  Set unused variables to null.
//					Add finalize().  Alphabetize methods.
// 2001-12-27	SAM, RTi		Update to use new fixedRead() to
//					improve performance (actually, no change
//					needed here).
//------------------------------------------------------------------------------
// 2003-08-26	J. Thomas Sapienza, RTi	* Updated to libStateMod version.
//					* Renamed SMDumpArcViewFile() to 
//					  writeArcViewFile().
//					* Renamed SMWriteArcViewFile() to
//					  writeArcViewFile().
//					* Renamed SMParseDelpltOutputFile() to
//					  readStateModDeltaOutputFile().
// 2007-03-01	SAM, RTi		Clean up code based on Eclipse feedback.
//------------------------------------------------------------------------------

namespace DWR.StateMod
{

	using Message = RTi.Util.Message.Message;
	using StringUtil = RTi.Util.String.StringUtil;

	public class StateMod_DeltaPlot : StateMod_Data
	{

	protected internal string _type; // "Difference", "Single", etc.
	protected internal IList<string> _columnTitles; // String vector, column titles
	protected internal IList<StateMod_DeltaPlotNode> _nodes; // StateMod_DeltaPlotNode vector

	/// <summary>
	/// Constructor.
	/// </summary>
	public StateMod_DeltaPlot() : base()
	{
		initialize();
	}

	public virtual void addColumnTitle(string s)
	{
		if (!string.ReferenceEquals(s, null))
		{
			_columnTitles.Add(s);
		}
	}

	/// <summary>
	/// Add big picture nodes.
	/// </summary>
	public virtual void addNode(StateMod_DeltaPlotNode node)
	{
		if (node != null)
		{
			_nodes.Add(node);
		}
	}

	/// <summary>
	/// Clean up before garbage collection.
	/// </summary>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: protected void finalize() throws Throwable
	~StateMod_DeltaPlot()
	{
		_type = null;
		_columnTitles = null;
		_nodes = null;
//JAVA TO C# CONVERTER NOTE: The base class finalizer method is automatically called in C#:
//		base.finalize();
	}

	/// <summary>
	/// Get the column titles.
	/// </summary>
	public virtual string getColumnTitle(int index)
	{
		return (string)_columnTitles[index];
	}

	public virtual int getColumnTitleSize()
	{
		return _columnTitles.Count;
	}

	public virtual StateMod_DeltaPlotNode getNode(int index)
	{
		return (StateMod_DeltaPlotNode)_nodes[index];
	}

	/// <summary>
	/// Return the type.
	/// </summary>
	public virtual string getType()
	{
		return _type;
	}

	private void initialize()
	{
		_type = "";
		_columnTitles = new List<string>();
		_nodes = new List<StateMod_DeltaPlotNode>();
	}

	public virtual int nodesSize()
	{
		return _nodes.Count;
	}

	/// <summary>
	/// Set the type.
	/// </summary>
	public virtual void setType(string s)
	{
		if (!string.ReferenceEquals(s, null))
		{
			_type = s;
		}
	}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public int writeArcViewFile(java.io.PrintWriter out) throws java.io.IOException
	public virtual int writeArcViewFile(PrintWriter @out)
	{
		string rtn = "StateMod_DeltaPlot.writeArcViewFile";
		string iline = null;
		string type = null;
		string yrOrAve = null;
		string colTitle = null;
		IList<string> list = null;
		StateMod_DeltaPlotNode node = null;
		string id = null;
		string name = null;

		try
		{
			type = getType();
			bool include_type = false;
			if (type.Equals("Difference", StringComparison.OrdinalIgnoreCase) || type.Equals("Merge", StringComparison.OrdinalIgnoreCase) || type.Equals("Diffx", StringComparison.OrdinalIgnoreCase))
			{
				include_type = true;
			}

			// print header
			yrOrAve = "";
			colTitle = "";
			iline = "Identifier, Name";
			if (include_type)
			{
				iline += ", " + type;
			}
			int size = _columnTitles.Count;
			for (int i = 0; i < size; i++)
			{
				list = StringUtil.breakStringList(_columnTitles[i], " ", StringUtil.DELIM_SKIP_BLANKS);
				yrOrAve = list[0];
				colTitle = list[1].Replace(',','_');
				if (!include_type)
				{
					iline += ",";
				}
				iline += " " + yrOrAve + " " + colTitle;
			}
			@out.println(iline);

			// print data
			int num = _nodes.Count;
			for (int i = 0; i < num; i++)
			{
				node = (StateMod_DeltaPlotNode)_nodes[i];
				id = node.getID();
				name = node.getName();
				if (string.ReferenceEquals(id, null) || id.Length == 0)
				{
					id = " ";
				}
				if (string.ReferenceEquals(name, null) || name.Length == 0)
				{
					name = " ";
				}
				else
				{
					name = name.Replace(',','_');
				}

				iline = "\"" + id + "\"," + name;
				int numz = node.getZsize();
				for (int j = 0; j < numz; j++)
				{
					iline += "," + node.getZ(j);
				}

				@out.println(iline);

			}
		}
		catch (Exception e)
		{
			rtn = null;
			iline = null;
			type = null;
			yrOrAve = null;
			colTitle = null;
			list = null;
			node = null;
			id = null;
			name = null;
			Message.printWarning(2, rtn, e);
			throw new IOException(e.Message);
		}

		rtn = null;
		iline = null;
		type = null;
		yrOrAve = null;
		colTitle = null;
		list = null;
		node = null;
		id = null;
		name = null;
		return 0;
	}

	/// <summary>
	/// Read delplt output information and store.
	/// </summary>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public int readStateModDeltaOutputFile(String filename) throws java.io.IOException
	public virtual int readStateModDeltaOutputFile(string filename)
	{
		string rtn = "StateMod_DeltaPlot.readStateModDeltaOutputFile";
		string iline = null;
		StreamReader @in = null;
		IList<string> list1 = null;
		string a = null;
		int? b = null;
		string format = "s12s1s24s1d10s1d10s1d10s1d10s1d10s1d10s1d10" +
				"s1d10s1d10s1d10s1d10s1d10s1d10s1d10s1d10s1d10s1d10" +
				"s1d10s1d10s1d10";
		IList<object> v = null;

		Message.printStatus(1, rtn, "Reading delplt output file: " + filename);
		try
		{
			@in = new StreamReader(filename);

			iline = @in.ReadLine().Trim();
			list1 = StringUtil.breakStringList(iline, " ", StringUtil.DELIM_SKIP_BLANKS);
			if (list1.Count < 2)
			{
				Message.printWarning(1, rtn, "Unknown format for first line in delplt output file: " + iline);
				@in.Close();
				return 1;
			}

			// first line: nz, nbigtitles
			if (Message.isDebugOn)
			{
				Message.printDebug(50, rtn, iline);
			}

			a = list1[0];
			//Message.printDebug ( 10, rtn, a );
			b = Convert.ToInt32(a);
			int nz = b.Value;
			//Message.printDebug ( 10, rtn, "" + nz );
			int nbigtitles = (Convert.ToInt32((string)list1[1]));

			// second line: type
			iline = @in.ReadLine();
			setType(iline.Trim());

			// line 3 through nbigtitles:  
			for (int i = 0; i < nbigtitles; i++)
			{
				iline = @in.ReadLine();
				addColumnTitle(iline.Trim());
			}

			// CAT !!!  Don't forget to come back to this ...
			// check here for props.BP_GET_COLUMN_TITLES_ONLY
			// CAT !!!

			// now read data
			while (!string.ReferenceEquals((iline = @in.ReadLine()), null))
			{
				try
				{
				StateMod_DeltaPlotNode node = new StateMod_DeltaPlotNode();
				v = StringUtil.fixedRead(iline, format);
				/* some names may contain commas; use fixed format read
				Vector list2 = StringUtil.breakStringList (
					iline, ",", StringUtil.DELIM_SKIP_BLANKS );
				*/
				if (v.Count < 2 + nz)
				{
					Message.printWarning(1, rtn, "Unknown format for input line in " + "delplt output file: " + iline);
					return 1;
				}
				node.setID(((string)v[0]).Trim());
				node.setName(((string)v[2]).Trim());
				for (int j = 2; j < 2 + nz; j++)
				{
					node.addZ((double?)v[2 * j]);
				}

				_nodes.Add(node);
				}
				catch (Exception e)
				{
					Message.printWarning(2, rtn, "Trouble parsing xgr line \"" + iline + "\"");
					Message.printWarning(5, rtn, e);
				}
			}
		}
		catch (Exception e)
		{
			rtn = null;
			iline = null;
			if (@in != null)
			{
				@in.Close();
			}
			@in = null;
			list1 = null;
			a = null;
			b = null;
			format = null;
			Message.printWarning(2, rtn, e);
			throw new IOException(e.Message);
		}

		rtn = null;
		iline = null;
		if (@in != null)
		{
			@in.Close();
		}
		@in = null;
		list1 = null;
		a = null;
		b = null;
		format = null;
		return 0;
	}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public void writeArcViewFile(String instrfile, String outstrfile, String[] new_comments) throws java.io.IOException
	public virtual void writeArcViewFile(string instrfile, string outstrfile, string[] new_comments)
	{
		string rtn = "StateMod_DeltaPlot.writeArcViewFile";
		PrintWriter @out = null;

		if (Message.isDebugOn)
		{
			Message.printDebug(2, rtn, "in writeArcViewFile printing file: " + outstrfile);
		}
		try
		{
			@out = new PrintWriter(new FileStream(outstrfile, FileMode.Create, FileAccess.Write));
			this.writeArcViewFile(@out);
			@out.flush();
			@out.close();
			@out = null;
			rtn = null;
		}
		catch (Exception e)
		{
			if (@out != null)
			{
				@out.close();
			}
			@out = null;
			rtn = null;
			Message.printWarning(2, rtn, e);
			throw new IOException(e.Message);
		}
	}

	}

}